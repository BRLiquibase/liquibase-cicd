name: Liquibase Rollback Pipeline

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Target environment"
        required: true
        type: choice
        options: [dev, test, prod]
        default: prod
      rollback_tag:
        description: "Tag to rollback to (e.g., v1.2.0)"
        required: true
        type: string

permissions:
  contents: read

jobs:
  rollback:
    runs-on: self-hosted

    env:
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres

    steps:
      - uses: actions/checkout@v4

      - name: Pick target URL
        id: envmap
        shell: bash
        run: |
          case "${{ inputs.target }}" in
            dev)  echo "LB_URL=${{ env.DEV_URL }}"  >> $GITHUB_OUTPUT;;
            test) echo "LB_URL=${{ env.TEST_URL }}" >> $GITHUB_OUTPUT;;
            prod) echo "LB_URL=${{ env.PROD_URL }}" >> $GITHUB_OUTPUT;;
            *)    echo "Unknown target"; exit 1;;
          esac

      - name: Export env for Flow
        shell: bash
        run: |
          echo "LB_URL=${{ steps.envmap.outputs.LB_URL }}" >> $GITHUB_ENV
          echo "LB_USER=${{ secrets.LB_USER }}"            >> $GITHUB_ENV
          echo "LB_PASSWORD=${{ secrets.LB_PASSWORD }}"    >> $GITHUB_ENV
          echo "ROLLBACK_TAG=${{ inputs.rollback_tag }}"   >> $GITHUB_ENV
          echo "CHANGELOG_FILE=changelog-sql/master.xml"   >> $GITHUB_ENV  # adjust if different

      - name: Run rollback flow
        shell: bash
        run: |
          liquibase flow --flow-file=rollback.flowfile.yaml
