name: Liquibase Pipeline (Secrets)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [dev, test, prod, all]
        default: dev
      policies:
        description: "Run Liquibase checks/policies?"
        required: true
        type: choice
        options: [off, on]
        default: off
      drift:
        description: "Run drift detection (diff) after deploy?"
        required: true
        type: choice
        options: [off, on]
        default: off

permissions:
  contents: read

concurrency:
  group: liquibase-${{ github.ref }}-${{ github.event.inputs.target }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: self-hosted

    strategy:
      matrix:
        env: ${{ fromJson( github.event.inputs.target == 'all' && '["dev","test","prod"]' || format('["{0}"]', github.event.inputs.target) ) }}

    env:
      CHANGELOG: changelog/master.xml
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres
      LB_USER: ${{ secrets.LB_USER }}
      LB_PASSWORD: ${{ secrets.LB_PASSWORD }}
      LIQUIBASE_PRO_LICENSE: ${{ secrets.LIQUIBASE_PRO_LICENSE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Liquibase (latest)
        uses: liquibase/setup-liquibase@v1
        with:
          version: 'latest'
          edition: 'pro'

      - name: Create defaults file with Pro license
        id: defaults
        run: |
          cat > liq-defaults.properties <<'PROPS'
          changeLogFile=changelog/master.xml
          liquibase.hub.mode=off
          PROPS

          if [ -n "${LIQUIBASE_PRO_LICENSE}" ]; then
            echo "liquibase.pro.licenseKey=${LIQUIBASE_PRO_LICENSE}" >> liq-defaults.properties
          fi

          echo "defaultsFile=$(pwd)/liq-defaults.properties" >> $GITHUB_OUTPUT

      - name: Map environment to URL & contexts
        id: envmap
        run: |
          case "${{ matrix.env }}" in
            dev)
              URL="${{ env.DEV_URL }}"
              CONTEXTS="dev,dev,test,prod"
              ;;
            test)
              URL="${{ env.TEST_URL }}"
              CONTEXTS="test,dev,test,prod"
              ;;
            prod)
              URL="${{ env.PROD_URL }}"
              CONTEXTS="prod,dev,test,prod"
              ;;
          esac
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "contexts=$CONTEXTS" >> "$GITHUB_OUTPUT"

      - name: (Optional) Run checks/policies
        if: ${{ github.event.inputs.policies == 'on' }}
        run: |
          liquibase \
            --defaultsFile="${{ steps.defaults.outputs.defaultsFile }}" \
            --url="${{ steps.envmap.outputs.url }}" \
            --username="${{ env.LB_USER }}" \
            --password="${{ env.LB_PASSWORD }}" \
            checks run || true

      - name: Update ${{ matrix.env }}
        run: |
          liquibase \
            --defaultsFile="${{ steps.defaults.outputs.defaultsFile }}" \
            --url="${{ steps.envmap.outputs.url }}" \
            --username="${{ env.LB_USER }}" \
            --password="${{ env.LB_PASSWORD }}" \
            --contexts="${{ steps.envmap.outputs.contexts }}" \
            update

      - name: (Optional) Drift detection vs. dev
        if: ${{ github.event.inputs.drift == 'on' }}
        run: |
          case "${{ matrix.env }}" in
            dev)  REF="${{ env.DEV_URL }}" ;;
            test) REF="${{ env.DEV_URL }}" ;;
            prod) REF="${{ env.DEV_URL }}" ;;
          esac
          liquibase \
            --defaultsFile="${{ steps.defaults.outputs.defaultsFile }}" \
            --url="${{ steps.envmap.outputs.url }}" \
            --username="${{ env.LB_USER }}" \
            --password="${{ env.LB_PASSWORD }}" \
            --referenceUrl="$REF" \
            diff || true
