name: Liquibase Compliance Pipeline (Flow-based)

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target environment'
        required: true
        type: choice
        options: [dev, test, prod, all]
        default: dev
      compliance_mode:
        description: 'Compliance: enforce (fail), observe (log), or off'
        required: true
        type: choice
        options: [enforce, observe, off]
        default: enforce
      evidence_snapshot:
        description: 'Capture post-deploy snapshot?'
        required: true
        type: choice
        options: [on, off]
        default: on

permissions:
  contents: read
  id-token: write
  actions: read

concurrency:
  group: liquibase-${{ github.workflow }}-${{ inputs.target }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: self-hosted
    strategy:
      matrix:
        env: ${{ fromJson( inputs.target == 'all' && '["dev","test","prod"]' || format('["{0}"]', inputs.target) ) }}

    environment: ${{ matrix.env }}

    env:
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres

    steps:
      - uses: actions/checkout@v4

      - name: Select target URL
        id: envmap
        shell: bash
        run: |
          set -euo pipefail
          case "${{ matrix.env }}" in
            dev)  LB_URL="${{ env.DEV_URL }}";;
            test) LB_URL="${{ env.TEST_URL }}";;
            prod) LB_URL="${{ env.PROD_URL }}";;
            *) echo "Unknown env '${{ matrix.env }}'"; exit 1;;
          esac
          echo "LB_URL=$LB_URL" >> "$GITHUB_OUTPUT"

      - name: Write liquibase.properties
        shell: bash
        env:
          LB_URL:  ${{ steps.envmap.outputs.LB_URL }}
          LB_USER: ${{ secrets.DB_USER }}
          LB_PWD:  ${{ secrets.DB_PWD }}
        run: |
          cat > liquibase.properties <<EOF
          url=${LB_URL}
          username=${LB_USER}
          password=${LB_PWD}
          EOF

      # Map inputs to flow env toggles
      - name: Set compliance env
        id: toggles
        shell: bash
        run: |
          case "${{ inputs.compliance_mode }}" in
            enforce) echo "RUN_POLICIES=on"          >> $GITHUB_ENV; echo "POLICY_ENFORCE=true"  >> $GITHUB_ENV;;
            observe) echo "RUN_POLICIES=on"          >> $GITHUB_ENV; echo "POLICY_ENFORCE=false" >> $GITHUB_ENV;;
            off)     echo "RUN_POLICIES=off"         >> $GITHUB_ENV; echo "POLICY_ENFORCE=false" >> $GITHUB_ENV;;
          esac
          echo "RUN_SNAPSHOT=${{ inputs.evidence_snapshot }}" >> $GITHUB_ENV
          echo "LIQUIBASE_ENV=${{ matrix.env }}"               >> $GITHUB_ENV

      # One command: flow handles drift -> policies -> deploy -> snapshot
      - name: Run compliance flow
        shell: bash
        run: |
          liquibase --license-key "${{ secrets.LIQUIBASE_PRO_LICENSE }}" \
                    flow --flow-file=liquibase.flowfile.yaml
