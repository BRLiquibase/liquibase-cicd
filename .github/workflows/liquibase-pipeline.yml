name: Liquibase Compliance Pipeline (Flow-based)

run-name: "Liquibase ➜ ${{ inputs.target }} • compliance=${{ inputs.compliance_mode }} • by @${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target environment'
        required: true
        type: choice
        options: [dev, test, prod, all]
        default: dev
      compliance_mode:
        description: 'Compliance checks: enforce (fail), observe (log), or off'
        required: true
        type: choice
        options: [enforce, observe, off]
        default: enforce
      evidence_snapshot:
        description: 'Capture evidence snapshot after deploy?'
        required: true
        type: choice
        options: [on, off]
        default: on
      change_ticket:
        description: 'Change/ticket ID (for audit trail labels)'
        required: false
        type: string
        default: ""

permissions:
  contents: read
  id-token: write
  actions: read

concurrency:
  group: liquibase-${{ github.workflow }}-${{ inputs.target }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: self-hosted
    strategy:
      matrix:
        env: ${{ fromJson( inputs.target == 'all' && '["dev","test","prod"]' || format('["{0}"]', inputs.target) ) }}

    # environment controls approvals/secrets per env
    environment: ${{ matrix.env }}

    env:
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres
      # Optional: set DRIFT_REF_URL as an Environment variable in GitHub for precise control

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select target URL
        id: envmap
        shell: bash
        run: |
          set -euo pipefail
          case "${{ matrix.env }}" in
            dev)  LB_URL="${{ env.DEV_URL }}";;
            test) LB_URL="${{ env.TEST_URL }}";;
            prod) LB_URL="${{ env.PROD_URL }}";;
            *) echo "Unknown env '${{ matrix.env }}'"; exit 1;;
          esac
          echo "LB_URL=$LB_URL" >> "$GITHUB_OUTPUT"

      - name: Determine reference URL for drift
        id: refmap
        shell: bash
        env:
          DRIFT_REF_URL: ${{ vars.DRIFT_REF_URL }}   # optional per-environment override
        run: |
          set -euo pipefail
          if [ -n "${DRIFT_REF_URL:-}" ]; then
            REF_URL="$DRIFT_REF_URL"
          else
            # Sensible fallback: compare upward from lower env
            case "${{ matrix.env }}" in
              dev)  REF_URL="${{ env.DEV_URL }}";;   # or set vars.DRIFT_REF_URL in the env
              test) REF_URL="${{ env.DEV_URL }}";;
              prod) REF_URL="${{ env.TEST_URL }}";;
            esac
          fi
          echo "REF_URL=$REF_URL" >> "$GITHUB_OUTPUT"

      - name: Prepare evidence folder
        shell: bash
        run: mkdir -p compliance

      # --- DRIFT FIRST, ALWAYS ---
      - name: Drift report (always first; never blocks)
        id: drift
        if: ${{ always() }}
        continue-on-error: true
        shell: bash
        env:
          LB_URL:  ${{ steps.envmap.outputs.LB_URL }}
          REF_URL: ${{ steps.refmap.outputs.REF_URL }}
          LB_USER: ${{ secrets.DB_USER }}
          LB_PWD:  ${{ secrets.DB_PWD }}
        run: |
          set -euo pipefail
          # Capture JSON + log for audit. Doesn't fail the job.
          liquibase \
            --url="$LB_URL" --username="$LB_USER" --password="$LB_PWD" \
            --reference-url="$REF_URL" --reference-username="$LB_USER" --reference-password="$LB_PWD" \
            --log-file=compliance/drift.log \
            drift --format=json > "compliance/drift-${{ matrix.env }}.json" || true

      # --- POLICIES SECOND ---
      - name: Compliance checks (run after drift)
        if: ${{ always() && inputs.compliance_mode != 'off' }}
        continue-on-error: ${{ inputs.compliance_mode == 'observe' }}
        shell: bash
        env:
          LB_URL:  ${{ steps.envmap.outputs.LB_URL }}
          LB_USER: ${{ secrets.DB_USER }}
          LB_PWD:  ${{ secrets.DB_PWD }}
        run: |
          set -euo pipefail
          liquibase --log-file=compliance/checks.log checks run ${{
            inputs.change_ticket != '' && format('--labels=change:{0}', inputs.change_ticket) || ''
          }} | tee compliance/checks.txt

      # Guardrails applied AFTER policies so drift+policies always execute
      - name: Guardrails — prod only from main
        if: ${{ matrix.env == 'prod' && github.ref != 'refs/heads/main' }}
        run: |
          echo "Ref '${GITHUB_REF}' is not allowed to deploy to prod. Use 'main'." >&2
          exit 1

      - name: Guardrails — disallow turning checks off in prod
        if: ${{ matrix.env == 'prod' && inputs.compliance_mode == 'off' }}
        run: |
          echo "Compliance checks cannot be disabled for prod." >&2
          exit 1

      - name: Preflight — validate changelog
        shell: bash
        env:
          LB_URL:  ${{ steps.envmap.outputs.LB_URL }}
          LB_USER: ${{ secrets.DB_USER }}
          LB_PWD:  ${{ secrets.DB_PWD }}
        run: |
          set -euo pipefail
          liquibase --log-file=compliance/validate.log validate

      - name: Run flow (policy & snapshot toggles)
        shell: bash
        env:
          LB_URL:        ${{ steps.envmap.outputs.LB_URL }}
          LB_USER:       ${{ secrets.DB_USER }}
          LB_PWD:        ${{ secrets.DB_PWD }}
          DEV_URL:       ${{ env.DEV_URL }}
          TEST_URL:      ${{ env.TEST_URL }}
          RUN_POLICIES:  ${{ inputs.compliance_mode == 'off' && 'off' || 'on' }}
          RUN_SNAPSHOT:  ${{ inputs.evidence_snapshot }}
          POLICY_ENFORCE: ${{ inputs.compliance_mode == 'enforce' && 'true' || 'false' }}
          CHANGE_TICKET: ${{ inputs.change_ticket }}
        run: |
          set -euo pipefail
          liquibase --license-key "${{ secrets.LIQUIBASE_PRO_LICENSE }}" \
                    --log-level=info \
                    --log-file=compliance/flow.log \
                    flow

      - name: Evidence — post-deploy snapshot
        if: ${{ inputs.evidence_snapshot == 'on' }}
        shell: bash
        env:
          LB_URL:  ${{ steps.envmap.outputs.LB_URL }}
          LB_USER: ${{ secrets.DB_USER }}
          LB_PWD:  ${{ secrets.DB_PWD }}
        run: |
          set -euo pipefail
          liquibase snapshot --format=json > "compliance/snapshot-${{ matrix.env }}.json"

      - name: Publish compliance evidence
        uses: actions/upload-artifact@v4
        with:
          name: "liquibase-evidence-${{ matrix.env }}-${{ github.run_number }}"
          path: compliance/
          if-no-files-found: warn
          retention-days: 30

      - name: Run summary
        shell: bash
        run: |
          {
            echo "### Liquibase ${{ matrix.env }} deployment"
            echo "- Compliance mode: **${{ inputs.compliance_mode }}**"
            [ -n "${{ inputs.change_ticket }}" ] && echo "- Change ticket: \`${{ inputs.change_ticket }}\`"
            echo "- Evidence artifact: **liquibase-evidence-${{ matrix.env }}-${{ github.run_number }}**"
            echo "- Drift JSON: \`compliance/drift-${{ matrix.env }}.json\`"
          } >> "$GITHUB_STEP_SUMMARY"
