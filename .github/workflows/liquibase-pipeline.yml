name: Liquibase Pipeline (Flow-based)

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Environment to run'
        required: true
        type: choice
        options: [dev, test, prod, all]
        default: dev

jobs:
  deploy:
    runs-on: self-hosted   # local runner; Liquibase already installed
    strategy:
      matrix:
        env: ${{ fromJson( inputs.target == 'all' && '["dev","test","prod"]' || format('["{0}"]', inputs.target) ) }}

    env:
      # JDBC URLs for your local containers
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres

      # Simple creds (adjust if needed)
      LB_USER:  postgres
      LB_PWD:   secret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pick target URL
        id: envmap
        shell: bash
        run: |
          set -euo pipefail
          case "${{ matrix.env }}" in
            dev)  LB_URL="${{ env.DEV_URL }}";;
            test) LB_URL="${{ env.TEST_URL }}";;
            prod) LB_URL="${{ env.PROD_URL }}";;
            *) echo "Unknown env '${{ matrix.env }}'"; exit 1;;
          esac
          echo "LB_URL=$LB_URL" >> "$GITHUB_OUTPUT"

      - name: Run flow (policies → snapshot → update → diff dev→test)
        shell: bash
        env:
          # Variables consumed by your flow file
          LB_URL:  ${{ steps.envmap.outputs.LB_URL }}
          LB_USER: ${{ env.LB_USER }}
          LB_PWD:  ${{ env.LB_PWD }}
          DEV_URL: ${{ env.DEV_URL }}
          TEST_URL: ${{ env.TEST_URL }}
        run: |
          set -euo pipefail
          # Uses LIQUIBASE_PRO_LICENSE GitHub secret for Pro features (flow + checks)
          liquibase --license-key "${{ secrets.LIQUIBASE_PRO_LICENSE }}" flow
          # If your flow file is named differently, use:
          # liquibase --license-key "${{ secrets.LIQUIBASE_PRO_LICENSE }}" flow --flow-file=.flowfile.yaml
