name: Liquibase Pipeline (Flow-based)

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Environment to run'
        required: true
        type: choice
        options: [dev, test, prod, all]
        default: dev
      policies:
        description: 'Run policies (checks run)?'
        required: true
        type: choice
        options: [on, off]
        default: on
      snapshot:
        description: 'Run snapshot (basic)?'
        required: true
        type: choice
        options: [on, off]
        default: on

jobs:
  deploy:
    runs-on: self-hosted   # Liquibase already installed on your runner
    strategy:
      matrix:
        env: ${{ fromJson( inputs.target == 'all' && '["dev","test","prod"]' || format('["{0}"]', inputs.target) ) }}

    env:
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres
      LB_USER:  postgres
      LB_PWD:   secret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pick target URL
        id: envmap
        shell: bash
        run: |
          set -euo pipefail
          case "${{ matrix.env }}" in
            dev)  LB_URL="${{ env.DEV_URL }}";;
            test) LB_URL="${{ env.TEST_URL }}";;
            prod) LB_URL="${{ env.PROD_URL }}";;
            *) echo "Unknown env '${{ matrix.env }}'"; exit 1;;
          esac
          echo "LB_URL=$LB_URL" >> "$GITHUB_OUTPUT"

      - name: Run flow (policies/snapshot toggled by inputs)
        shell: bash
        env:
          # Consumed by your flow file
          LB_URL:        ${{ steps.envmap.outputs.LB_URL }}
          LB_USER:       ${{ env.LB_USER }}
          LB_PWD:        ${{ env.LB_PWD }}
          DEV_URL:       ${{ env.DEV_URL }}
          TEST_URL:      ${{ env.TEST_URL }}
          RUN_POLICIES:  ${{ inputs.policies }}   # on/off
          RUN_SNAPSHOT:  ${{ inputs.snapshot }}   # on/off
        run: |
          set -euo pipefail
          liquibase --license-key "${{ secrets.LIQUIBASE_PRO_LICENSE }}" flow
          # If your flow file has a non-default name, add: --flow-file=liquibase.flowfile.yaml
