name: Liquibase Simple Update (Local LB)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Where should the update run?"
        required: true
        type: choice
        options: [dev, test, prod]
        default: dev
      policies:
        description: "Run Liquibase Pro checks/policies before update?"
        required: true
        type: choice
        options: [off, on]
        default: off

permissions:
  contents: read

jobs:
  update:
    runs-on: self-hosted

    env:
      # Local containers
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres

      # Secrets (set in repo → Settings → Secrets and variables → Actions)
      LB_USER: ${{ secrets.LB_USER || 'postgres' }}
      LB_PASSWORD: ${{ secrets.LB_PASSWORD || 'secret' }}
      LIQUIBASE_PRO_LICENSE: ${{ secrets.LIQUIBASE_PRO_LICENSE || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Liquibase on PATH
        shell: bash
        run: |
          set -e
          if ! command -v liquibase >/dev/null 2>&1; then
            echo "Liquibase is not on PATH for the self-hosted runner user." >&2
            echo "Add it to PATH or symlink it, e.g.: sudo ln -s /opt/liquibase/liquibase /usr/local/bin/liquibase" >&2
            exit 1
          fi
          liquibase --version

      - name: Write defaults (inject license if present)
        id: defaults
        run: |
          cat > liq-defaults.properties <<'PROPS'
          changeLogFile=changelog/master.xml
          liquibase.hub.mode=off
          PROPS
          if [ -n "${LIQUIBASE_PRO_LICENSE}" ]; then
            echo "liquibase.pro.licenseKey=${LIQUIBASE_PRO_LICENSE}" >> liq-defaults.properties
          fi
          echo "file=$(pwd)/liq-defaults.properties" >> $GITHUB_OUTPUT

      - name: Pick DB URL + contexts
        id: envmap
        run: |
          case "${{ github.event.inputs.target }}" in
            dev)  URL="${{ env.DEV_URL }}";  CONTEXTS="dev,dev,test,prod" ;;
            test) URL="${{ env.TEST_URL }}"; CONTEXTS="test,dev,test,prod" ;;
            prod) URL="${{ env.PROD_URL }}"; CONTEXTS="prod,dev,test,prod" ;;
          esac
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "contexts=$CONTEXTS" >> $GITHUB_OUTPUT

      - name: (Optional) Policies
        if: ${{ github.event.inputs.policies == 'on' }}
        run: |
          liquibase \
            --defaultsFile="${{ steps.defaults.outputs.file }}" \
            --url="${{ steps.envmap.outputs.url }}" \
            --username="${{ env.LB_USER }}" \
            --password="${{ env.LB_PASSWORD }}" \
            checks run || true

      - name: Update ${{ github.event.inputs.target }}
        run: |
          liquibase \
            --defaultsFile="${{ steps.defaults.outputs.file }}" \
            --url="${{ steps.envmap.outputs.url }}" \
            --username="${{ env.LB_USER }}" \
            --password="${{ env.LB_PASSWORD }}" \
            --contexts="${{ steps.envmap.outputs.contexts }}" \
            update
