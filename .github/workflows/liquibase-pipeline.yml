name: Liquibase Pipeline (Flow-based)

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Environment to run'
        required: true
        type: choice
        options: [dev, test, prod, all]
        default: dev
      policies:
        description: 'Run policies (checks run)?'
        required: true
        type: choice
        options: [on, off]
        default: on
      snapshot:
        description: 'Run snapshot (basic)?'
        required: true
        type: choice
        options: [on, off]
        default: on

jobs:
  deploy:
    runs-on: self-hosted
    strategy:
      matrix:
        env: ${{ fromJson( inputs.target == 'all' && '["dev","test","prod"]' || format('["{0}"]', inputs.target) ) }}

    env:
      DEV_URL:  jdbc:postgresql://localhost:5433/postgres
      TEST_URL: jdbc:postgresql://localhost:5434/postgres
      PROD_URL: jdbc:postgresql://localhost:5435/postgres
      LB_USER:  postgres
      LB_PWD:   secret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pick target URL + flow
        id: envmap
        shell: bash
        run: |
          case "${{ matrix.env }}" in
            dev)  LB_URL="${{ env.DEV_URL }}";;
            test) LB_URL="${{ env.TEST_URL }}";;
            prod) LB_URL="${{ env.PROD_URL }}";;
          esac

          # Decide which flow to run based on inputs
          if [ "${{ inputs.policies }}" = "on" ] && [ "${{ inputs.snapshot }}" = "on" ]; then
            FLOW="policies-snapshot-update-diff"
          elif [ "${{ inputs.policies }}" = "on" ] && [ "${{ inputs.snapshot }}" = "off" ]; then
            FLOW="policies-update-diff"
          elif [ "${{ inputs.policies }}" = "off" ] && [ "${{ inputs.snapshot }}" = "on" ]; then
            FLOW="snapshot-update-diff"
          else
            FLOW="update-diff"
          fi

          echo "LB_URL=$LB_URL" >> "$GITHUB_OUTPUT"
          echo "FLOW=$FLOW" >> "$GITHUB_OUTPUT"

      - name: Run flow
        shell: bash
        env:
          LB_URL:  ${{ steps.envmap.outputs.LB_URL }}
          LB_USER: ${{ env.LB_USER }}
          LB_PWD:  ${{ env.LB_PWD }}
          DEV_URL: ${{ env.DEV_URL }}
          TEST_URL: ${{ env.TEST_URL }}
        run: |
          liquibase flow
          # or if you kept a custom filename:
          # liquibase flow --flow-file=.flowfile.yaml

